<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.github.mapper.FamousTeacherMapper">
    <resultMap id="BaseResultMap" type="com.github.model.FamousTeacher">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="person_name" property="personName" jdbcType="VARCHAR"/>
        <result column="description" property="description" jdbcType="VARCHAR"/>
        <result column="property" property="property" jdbcType="VARCHAR"/>
        <result column="cover" property="cover" jdbcType="VARCHAR"/>
        <result column="type_id" property="typeId" jdbcType="INTEGER"/>
        <result column="subject_id" property="subjectId" jdbcType="INTEGER"/>
        <result column="status" property="status" jdbcType="INTEGER"/>
        <result column="fid" property="fid" jdbcType="INTEGER"/>
    </resultMap>
    <sql id="Base_Column_List">
    id, person_name, description, property, cover, type_id, subject_id, `status`, fid
  </sql>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List"/>
        from t_famous_teacher
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from t_famous_teacher
    where id = #{id,jdbcType=INTEGER}
  </delete>
    <insert id="insert" parameterType="com.github.model.FamousTeacher">
        <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into t_famous_teacher (person_name, description, property,
        cover, type_id, subject_id,
        `status`, fid)
        values (#{personName,jdbcType=VARCHAR}, #{description,jdbcType=VARCHAR}, #{property,jdbcType=VARCHAR},
        #{cover,jdbcType=VARCHAR}, #{typeId,jdbcType=INTEGER}, #{subjectId,jdbcType=INTEGER},
        #{status,jdbcType=INTEGER}, #{fid,jdbcType=INTEGER})
    </insert>
    <insert id="insertSelective" parameterType="com.github.model.FamousTeacher">
        <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into t_famous_teacher
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="personName != null">
                person_name,
            </if>
            <if test="description != null">
                description,
            </if>
            <if test="property != null">
                property,
            </if>
            <if test="cover != null">
                cover,
            </if>
            <if test="typeId != null">
                type_id,
            </if>
            <if test="subjectId != null">
                subject_id,
            </if>
            <if test="status != null">
                `status`,
            </if>
            <if test="fid != null">
                fid,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="personName != null">
                #{personName,jdbcType=VARCHAR},
            </if>
            <if test="description != null">
                #{description,jdbcType=VARCHAR},
            </if>
            <if test="property != null">
                #{property,jdbcType=VARCHAR},
            </if>
            <if test="cover != null">
                #{cover,jdbcType=VARCHAR},
            </if>
            <if test="typeId != null">
                #{typeId,jdbcType=INTEGER},
            </if>
            <if test="subjectId != null">
                #{subjectId,jdbcType=INTEGER},
            </if>
            <if test="status != null">
                #{status,jdbcType=INTEGER},
            </if>
            <if test="fid != null">
                #{fid,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.github.model.FamousTeacher">
        update t_famous_teacher
        <set>
            <if test="personName != null">
                person_name = #{personName,jdbcType=VARCHAR},
            </if>
            <if test="description != null">
                description = #{description,jdbcType=VARCHAR},
            </if>
            <if test="property != null">
                property = #{property,jdbcType=VARCHAR},
            </if>
            <if test="cover != null">
                cover = #{cover,jdbcType=VARCHAR},
            </if>
            <if test="typeId != null">
                type_id = #{typeId,jdbcType=INTEGER},
            </if>
            <if test="subjectId != null">
                subject_id = #{subjectId,jdbcType=INTEGER},
            </if>
            <if test="status != null">
                `status` = #{status,jdbcType=INTEGER},
            </if>
            <if test="fid != null">
                fid = #{fid,jdbcType=INTEGER},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.github.model.FamousTeacher">
    update t_famous_teacher
    set person_name = #{personName,jdbcType=VARCHAR},
      description = #{description,jdbcType=VARCHAR},
      property = #{property,jdbcType=VARCHAR},
      cover = #{cover,jdbcType=VARCHAR},
      type_id = #{typeId,jdbcType=INTEGER},
      subject_id = #{subjectId,jdbcType=INTEGER},
      `status` = #{status,jdbcType=INTEGER},
      fid = #{fid,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>


    <select id="getList" parameterType="com.github.model.FamousTeacher" resultMap="BaseResultMap">
        SELECT * FROM t_famous_teacher
        WHERE
        TRUE
        <if test="id != null">
            AND id = #{id}
        </if>
        <if test="personName != null">
            AND person_name LIKE '%${personName}%'
        </if>
        <if test="description != null">
            AND description LIKE '%${description}%'
        </if>
        <if test="property != null">
            AND property = #{property}
        </if>
        <if test="cover != null">
            AND cover = #{cover}
        </if>
        <if test="typeId != null">
            AND type_id = #{typeId}
        </if>
        <if test="subjectId != null">
            AND subject_id = #{subjectId}
        </if>
        <if test="status != null">
            AND`status` = #{status}
        </if>
        <if test="fid != null">
            AND fid = #{fid}
        </if>
    </select>

    <select id="getListNotInType" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from t_famous_teacher
        <where>
            id not in (select teacher_id from t_famous_teacher_type_relation where type_id = #{typeId})
            <if test="teacher.id != null">
                AND id = #{teacher.id}
            </if>
            <if test="teacher.personName != null">
                AND person_name LIKE '%${teacher.personName}%'
            </if>
            <if test="teacher.description != null">
                AND description LIKE '%${teacher.description}%'
            </if>
            <if test="teacher.property != null">
                AND property = #{teacher.property}
            </if>
            <if test="teacher.cover != null">
                AND cover = #{teacher.cover}
            </if>
            <if test="teacher.typeId != null">
                AND type_id = #{teacher.typeId}
            </if>
            <if test="teacher.subjectId != null">
                AND subject_id = #{teacher.subjectId}
            </if>
            <if test="teacher.status != null">
                AND`status` = #{teacher.status}
            </if>
            <if test="teacher.fid != null">
                AND fid = #{teacher.fid}
            </if>
        </where>
    </select>


</mapper>